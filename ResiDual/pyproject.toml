[tool.pytest.ini_options]
minversion = "6.2"
addopts = "-ra"
testpaths = ["tests"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "pragma: nocover",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
omit = [
    # ignore all test cases in tests/
    "tests/*",
]

[tool.mypy]
files = ["src/**/*.py", "test/*.py"]
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = B,C,E,F,P,T4,W,B9
ignore = ["E203", "E501", "SIM118"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.pydocstyle]
convention = 'google'
# ignore all missing docs errors
add-ignore = ['D100', 'D101', 'D102', 'D103', 'D104', 'D105', 'D106', 'D107']

[tool.bandit]
skips = ["B101"]

[build-system]
requires = ["setuptools", "wheel", "setuptools_scm[toml]"]
build-backend = "setuptools.build_meta"

[tool.setuptools-git-versioning]
enabled = true

[dependency-groups]
dev = ["ruff", "pre-commit", "bandit", "pytest", "pytest-cov", "residual"]


[tool.uv.sources]
residual = { workspace = true }
latentis = { git = "https://github.com/Flegyas/latentis/", branch = "develop" }

[project]
name = "residual"
dependencies = [
    "rich",
    "dvc",
    "python-dotenv",
    "matplotlib",
    "stqdm",
    "einops",
    "transformers",
    "open_clip_torch",
    "dvc_gdrive",
    "seaborn",
    "plotly",
    "latentis",
    "platformdirs==3.9.1",
    "nltk",
    "datasets[vision]",
    "gin-config",
    "schedulefree",
    "numpy>=2.0.2",
    "ipykernel>=6.29.5",
    "wandb>=0.18.7",
    "lovely-tensors>=0.1.18",
    "wilds>=2.0.0",
]

dynamic = ["version"]
description = "Code implementation for the paper 'ResiDual Transformer Alignment with Spectral Decomposition'."
readme = "README.md"
urls = { Repository = "https://github.com/flegyas/ResiDual" }
maintainers = [
    { name = "Valentino Maiorca", email = "valentino@maiorca.xyz" },
    { name = "Lorenzo Basile" },
]
requires-python = ">=3.9"
keywords = ["residual", "neural networks", "latent spaces", "clip", "python"]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
    "License :: OSI Approved :: MIT License",
    # "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",

]

[project.scripts]
encode = "residual.data.encode.residual_encode:run"
train = "residual.nn.train:run"

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
